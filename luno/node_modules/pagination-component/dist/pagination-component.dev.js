'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

/**
 * https://codereview.stackexchange.com/a/183472
 * Return an integer range within [min, min + total) of given length centered
 * around the current page number.
 */
var pagingRange = function (current, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.min, min = _c === void 0 ? 1 : _c, _d = _b.total, total = _d === void 0 ? 20 : _d, _e = _b.length, length = _e === void 0 ? 5 : _e;
    if (length > total)
        length = total;
    var start = current - Math.floor(length / 2);
    start = Math.max(start, min);
    start = Math.min(start, min + total - length);
    return Array.from({ length: length }, function (el, i) { return start + i; });
};

function usePagination(_a) {
    var _b = _a.initialPage, initialPage = _b === void 0 ? 1 : _b, _c = _a.pageCount, pageCount = _c === void 0 ? initialPage : _c, onChange = _a.onChange;
    if (initialPage > pageCount)
        throw new Error("`initialPage` prop must be less than or equal to `pageCount` prop.");
    var _d = react.useState(initialPage), currentPage = _d[0], setCurrentPage = _d[1];
    var setCurrentPageToNext = function () {
        // if (currentPage + 1) <= pageCount
        // set currentPage to currentPage + 1
        if (currentPage + 1 <= pageCount) {
            var newPage = currentPage + 1;
            setCurrentPage(newPage);
            return newPage;
        }
        throw new Error("Current page must be less than or equal to " + pageCount + ".");
    };
    var setCurrentPageToPrev = function () {
        // check if currentPage is > 1
        // set currentPage to currentPage - 1
        if (currentPage > 1) {
            var newPage = currentPage - 1;
            setCurrentPage(newPage);
            return newPage;
        }
        throw new Error("Current page must be greater than or equal to 1.");
    };
    var setCurrentPageToFirst = function () {
        setCurrentPage(1);
        return 1;
    };
    var setCurrentPageToLast = function () {
        setCurrentPage(pageCount);
        return pageCount;
    };
    var setCurrentPageToPage = function (page) {
        // check if page is in inclusive range from 1 to pageCount
        // set currentPage to page
        if (page >= 1 && page <= pageCount) {
            setCurrentPage(page);
            return page;
        }
        throw new Error("Page must be between 1 and " + pageCount + " inclusive.");
    };
    var setPage = function (_a) {
        var next = _a.next, prev = _a.prev, first = _a.first, last = _a.last, page = _a.page;
        var newPage = currentPage;
        // set page depending on page options passed
        if (next)
            newPage = setCurrentPageToNext();
        else if (prev)
            newPage = setCurrentPageToPrev();
        else if (first)
            newPage = setCurrentPageToFirst();
        else if (last)
            newPage = setCurrentPageToLast();
        else if (page)
            newPage = setCurrentPageToPage(page);
        if (onChange)
            onChange(newPage);
    };
    var isFirstPage = function () { return currentPage === 1; };
    var isLastPage = function () { return currentPage === pageCount; };
    return {
        setPage: setPage,
        page: 0,
        index: 0,
        currentPage: currentPage,
        isCurrentPage: false,
        isPrev: false,
        isNext: false,
        isFirstPage: isFirstPage,
        isLastPage: isLastPage
    };
}

var Pagination = function (_a) {
    var _b = _a.initialPage, initialPage = _b === void 0 ? 1 : _b, _c = _a.pageCount, pageCount = _c === void 0 ? initialPage : _c, _d = _a.show, show = _d === void 0 ? 10 : _d, onChange = _a.onChange, children = _a.children;
    var pagination = usePagination({ initialPage: initialPage, pageCount: pageCount, onChange: onChange, children: children });
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [!pagination.isFirstPage() && children(__assign(__assign({}, pagination), { isPrev: true })), pagingRange(pagination.currentPage, { total: pageCount, length: show }).map(function (page, index) {
                return children(__assign(__assign({}, pagination), { page: page, index: index, isCurrentPage: page === pagination.currentPage }));
            }), !pagination.isLastPage() && children(__assign(__assign({}, pagination), { isNext: true }))] }, void 0));
};

exports["default"] = Pagination;
exports.usePagination = usePagination;
//# sourceMappingURL=pagination-component.dev.js.map
